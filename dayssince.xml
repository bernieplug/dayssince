<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs 
	title="__MSG_dayssince__"
	title_url="http://leancode.com/dayssince/"
	directory_title="__MSG_directorytitle__"
	description="__MSG_description__"
	scrolling="true"
	singleton="false"
	author="Bernie T."
	author_email="widgets@leancode.com"
	author_affiliation="Leancode Inc."
	author_location="Bellevue, WA"
	screenshot="http://dayssince.googlecode.com/svn/trunk/screenshot.png"
	thumbnail="http://dayssince.googlecode.com/svn/trunk/thumbnail.png"
	author_photo="http://dayssince.googlecode.com/svn/trunk/author_photo.png"
	author_aboutme="Software developer and entrepreneur. Look me up to talk about your next project."
	author_quote="Time. time. time.  Look what's become of me."
	author_link="http://leancode.com/"
>
	<Locale messages="http://dayssince.googlecode.com/svn/trunk/ALL_ALL.xml"/>
	<Locale lang="zh-CN" messages="http://dayssince.googlecode.com/svn/trunk/zh_cn_ALL.xml"/> 
	<Locale lang="zh-tw" messages="http://dayssince.googlecode.com/svn/trunk/zh_tw_ALL.xml"/>
	<Locale lang="es" messages="http://dayssince.googlecode.com/svn/trunk/es_ALL.xml"/>
	<Locale lang="pt-BR" messages="http://dayssince.googlecode.com/svn/trunk/pt_br_ALL.xml"/>
	<Require feature="analytics"/>
	<Require feature="setprefs"/>
	<Require feature="dynamic-height"/>
	<Require feature="minimessage" /> 
</ModulePrefs>
<UserPref name="reminders" display_name="__MSG_yourreminders__" datatype="string" default_value="[]"></UserPref>
<UserPref name="ver" display_name="__MSG_dayssince__ __MSG_version__" datatype="string" default_value=""></UserPref>
<UserPref name="msg1" datatype="hidden" default_value="1"></UserPref>
<Content type="html">
<![CDATA[

<script language="JavaScript" src="http://dayssince.googlecode.com/svn/trunk/json_ori.js"></script>

<script>

// We contain all code in a single javascript global (a namespace)
// See http://www.dustindiaz.com/namespace-your-javascript/
// This isn't really necessary if we are running in our own iframe
// (as non-inlined gadgets are), but it future-proofs the code
var daysSince__MODULE_ID__ = function () {

	// private attributes, methods, and initialization code
	
	var minutes = 1000*60;
	var hours = minutes*60;
	var days = hours*24;
	var years = days*365;
	var igPrefs;
	var reminders;
	var schemaUpgraded = false;
	
	var DESC = 0;
	var DATE = 1;
	var AVG = 2;
	var CNT = 3;
	
	// message keys must start with 'msg' (to filter out other object attribs)
	// just comment out messages that we don't want to display anymore
	// don't delete them, because we can't ever reuse the keys (message #s)
	// to add a new one, 
	//   1. add to this list
	//   2. add the appropriate strings to ALL locale files
	//   3. add the preference name as a UserPref
	var messages = {
		msg1: "__MSG_newrelated__ <a href=http://leancode.com/daysuntil/ target=_blank>__MSG_daysuntil__</a>"
	};

	function displayMessages() {
		var mini = new _IG_MiniMessage(__MODULE_ID__);
		
		for (var msg in messages) {
			if ((msg.substring(0,3) == 'msg') && (igPrefs.getInt(msg) == 0)) {
				mini.createDismissibleMessage(messages[msg], function () {
				igPrefs.set(msg, "1");
				return true;
				});
			}
		}
	}
	
	function decodeDates() {
		for (var i = 0; i < reminders.length; i++) {
			var d = reminders[i][DATE].match(/^(\d\d\d\d)-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d)Z/);
			
			if (d) {
				reminders[i][DATE] = new Date(Date.UTC(d[1],d[2]-1,d[3],d[4],d[5],d[6]));
			} else {
				reminders[i][DATE] = new Date();
			}
		}
	}
	
	function loadReminders() {
		var prefs = igPrefs.getString("reminders");

		if (prefs != "") {
			reminders = prefs.parseJSON();
		}
		upgradeSchema();
		decodeDates();
		
		if (schemaUpgraded) saveReminders();
		
		createTable();
	}
	
	// a,b must be reminders
	function sortOverdueDescending(a,b) {
	
		// days since last reset - average days between resets. Special case if no resets.
		function daysOverdue(n) {
			var x = calendarDaysSince(n[DATE]);
			
			return x - ((n[CNT] == 0) ? (36500+(x*2)) : n[AVG]); 
		}
		
		var x = daysOverdue(b);
		var y = daysOverdue(a);

		return ((x < y) ? -1 : ((x > y) ? 1 : 0));
	}
	
	function upgradeSchema() {
		if ((reminders.length > 0) && (reminders[0].lastreset)) {
			// old format stored in prefs. Upgrade to latest schema
			var newr = [];
			
			for (var i = 0; i < reminders.length; i++) {
			
				// put the date in ISO string format that's now 
				// what we expect when preferences are stored.
				// we'll then convert back in decodeDates()
				var d = new Date(parseInt(reminders[i].lastreset));
				d = d.toJSONString();
				// toJSONString puts extra quotes around for eval(). Remove.
				d = d.substring(1, d.length-1);
				newr.push([
					reminders[i].description,
					d,
					0,
					0,
				]);
			}
			reminders = newr;
			schemaUpgraded = true;
		}
	}
	
	function saveReminders() {

		// as of Oct 2007, Google's behavior appears to be this:
		// if the saved preference string is too long for them 
		// (currently documented to be 2K chars)
		// the save will often work (!), but getString("reminders") will return "[]"
		// (Google appears to intentionally return a valid but empty JSON array!)
		// And a get() after set() will return the cached value, even if it's too 
		// large -- but future refreshes of the page will return "[]"
		// So we have to enforce the 2K limit here.
		
		var json = reminders.toJSONString();
		var encoded = _esc(json);
		
		// Approx 200 chars of overhead in the rest of Google's HTTP GET
		// requests with all the preferences for our gadget
		if (encoded.length < (2048 - 200)) {
			igPrefs.set("reminders", json, "ver", "$Rev$");
		} else {
			var mini = new _IG_MiniMessage(__MODULE_ID__);
			var lost = reminders.pop();
		
			mini.createDismissibleMessage(lost[DESC] + ": " + "__MSG_nospace__");
		}
	}
	
	function rowStyle(number) {
		if (number % 2 != 0)
			return "background: #F5F5DC";
		else
			return "";
	}
	
	function createTable() {
		var html = "<table cellspacing=0px cellpadding=2px id=remindersTable__MODULE_ID__ style=\"padding: 0; margin: 0\">";
		
		reminders.sort(sortOverdueDescending);

		for (var i = 0; i < reminders.length; i++) {
			if (reminders[i] == null)
				break;

			html = html + createRow(i, reminders[i][DESC], reminders[i][DATE], reminders[i][AVG], reminders[i][CNT]);
		}

		html = html + "</table>";
		
		_gel("remindersDiv__MODULE_ID__").innerHTML = html;
		
		_IG_AdjustIFrameHeight();
	}
	
	function createRow(number, description, lastreset, average, count) {
		var now = new Date();
		var dayssince = calendarDaysSince(lastreset);
		
		// break up long words for those browsers (firefox <= 2) that 
		// don't support word-wrap:break-word CSS3 style for fixed-width containers
		description = description.replace(/(\S{8,}?)/g, 
		"$1<wbr/><span style=\"font-size: 1px; line-height: 1px;" + 
		"float: right !important;" +
		"float: none;\"> </span>");
		
		var extra_css = "";
		if ((dayssince > average) && (count > 1)){
			extra_css = " color: #880000;";
		}
		
		var html =
			'<tr style="' + rowStyle(number) + '">' +
			'<td><div style="border: 2px solid #00008B;' + 
			'background-color: #00BFFF; color: #00008B; padding: 2px;' +
			'margin: 0 2px; float: right;"><font size="-1">' + 
			 dayssince + '</font></div></td>' +
			'<td style="text-align: center;' +
			'padding 0px 2px 0px 2px; width: 100%">' +
			'<p style="margin: 0 auto; padding: 0 5px 0 5px;' +
			'word-wrap: break-word; width: 100%;' + extra_css + 
			'" title="' + count + ' __MSG_resets__. __MSG_average__ ' +
			average + ' __MSG_days__"><font size="-1">' + description +
			"</font></p></td>" +
			"<td style=\"white-space: nowrap;\">" +
			createReset(number) +
			createDelete(number) +
			"</td>" +
			"</tr>";

		return html;
	}
	
	// returns integer with calendar days since the startDate, midnight to midnight
	// startDate is a Date object. Assumes startDate is in the past.
	function calendarDaysSince(startDate) {
		var nowDate = new Date();

		// Roll clocks back to midnight
		var start = new Date(startDate.getYear(), startDate.getMonth(), startDate.getDate());
		var now = new Date(nowDate.getYear(), nowDate.getMonth(), nowDate.getDate());

		return Math.ceil((now.getTime()-start.getTime())/days);
	}
	
	function createDelete(number) {
		var img = _IG_GetImageUrl('http://dayssince.googlecode.com/svn/trunk/x.gif');
		var html =
			"<a href=\"javascript:daysSince__MODULE_ID__.deleteReminder(" + number + ")\">" +
			'<img style="border: 0; margin: 0 2px 0 4px; padding: 0;"' +
			" src=\"" + img + "\">" +
			"</a>";
		return html;
	}

	function createReset(number) {
		var img = _IG_GetImageUrl('http://dayssince.googlecode.com/svn/trunk/reset.gif');
		var html =
			"<a href=\"javascript:daysSince__MODULE_ID__.resetReminder(" + number + ")\">" +
			'<img style="border: 0; margin: 0 4px 0 2px; padding: 0;"' +
			" src=\"" + img + "\">" +
			"</a>";
		return html;
	}
	
	// return the "public" attributes and method closures of our object
	
	return {
		onLoad : function() {
			igPrefs = new _IG_Prefs(__MODULE_ID__);
			
			loadReminders();
			displayMessages();
		},

		addReminder : function(description, daysago_string) {
			var description = _trim(description);
			var date = new Date();
			var daysago = parseInt(daysago_string);
			if (isNaN(daysago)) {
				daysago = 0;
			}

			date.setDate(date.getDate()-daysago);

			_gel("newReminderInput__MODULE_ID__").value = "";
			if (description == "")
				return false;

			reminders.push([
				description, 
				date, 
				0, 0,
			]);

			saveReminders();
			createTable();
			
			// return false to "fail" submit - thus stay on the current page.
			// We still have saved the changed data here in our JS code
			return false;
		},
		
		deleteReminder: function(number) {
			var beginning = reminders.slice(0, number);
			var end = reminders.slice(number + 1, reminders.length);

			reminders = beginning.concat(end);
			saveReminders();
			createTable();
		},
		
		resetReminder: function(n) {
			var now = new Date();
			
			// update average and count
			reminders[n][AVG] = Math.round(((reminders[n][AVG] * reminders[n][CNT]) + calendarDaysSince(reminders[n][DATE])) / (reminders[n][CNT] + 1));
			reminders[n][CNT]++;

			reminders[n][DATE] = now;
			saveReminders();
			createTable();
		}
	};
}();

_IG_RegisterOnloadHandler(daysSince__MODULE_ID__.onLoad);
_IG_Analytics("UA-99119-16", "/dayssince");
	
</script>

<div id = "body_ds__MODULE_ID__" style="overflow: auto; padding: 0; margin: 0; border: 0;">
	<form name="newReminderForm__MODULE_ID__"
		style="padding: 0; margin: 0;"
		onsubmit="return daysSince__MODULE_ID__.addReminder(
		document.newReminderForm__MODULE_ID__.
		newReminderInput__MODULE_ID__.value,
		document.newReminderForm__MODULE_ID__.
		newDaysSinceInput__MODULE_ID__.value)">
		<table id="newReminderForm__MODULE_ID__" cellspacing=2px>
			<tr>
				<td nowrap>
					<input size="3" id="newDaysSinceInput__MODULE_ID__" 
						value="0" type="text">
						<font size="-1"> __MSG_dayssince__</font></td>
				<td style='width:100%' >
					<input id="newReminderInput__MODULE_ID__" type="text"
						style='width:100%' />
				</td>
				<td>
					<input type='submit' value="__MSG_Add__"/>
				</td>
			</tr>
		</table>
	</form>
	<div id="remindersDiv__MODULE_ID__" style="padding: 0; margin: 0"; overflow="auto"></div>
</div>
]]>
</Content>
</Module>

